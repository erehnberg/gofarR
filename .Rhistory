document()
devtools::document()
devtools::document()
document()
devtools::document()
getRversion()
setup_peloton_data <- function(display_name = leaderboard_name) {
workout_data_interface <<- read.csv(paste0(display_name,"_workouts.csv"))
cycling_classes <<- workout_data_interface %>%
filter(Fitness.Discipline == "Cycling")%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))
}
setup_peloton_data("pizza2watts")
getwd()
setup_peloton_data("pizza2watts")
library(dplyr)
setup_peloton_data("pizza2watts")
View(cycling_classes)
getwd()
setup_peloton_data <- function(display_name = leaderboard_name) {
workout_data_interface <<- read.csv(paste0(display_name,"_workouts.csv"))
}
setup_peloton_data <- function(display_name = leaderboard_name) {
workout_data_interface <<- read.csv(paste0(display_name,"_workouts.csv"))
}
setup_peloton_data("pizza2watts")
data <- workout_data_interface
str(data)
colnames(data)
type <- "EDM"
data <- filter(data, grep(paste0("*",type,"*")))
?grepl
data <- filter(data, grepl(paste0("*",type,"*"), Title))
ata <- filter(data, grepl(paste0("*",type,"*"), data$Title))
ata
data1 <- data%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))
library(dplyr)
data1 <- data%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))
data2 <- data <- filter(data, grepl(paste0("*",type,"*"), data$Title))
data2
top_instructor <- function(discipline = "All") {
if (discipline == "All") {
filt_by_disc <- workout_data_interface%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))
}
else {
filt_by_disc <- workout_data_interface%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))%>%
filter(Fitness.Discipline == discipline)
}
dis_class_by_inst <- filt_by_disc$Instructor.Name%>%
table()%>%
data.frame()
rank_inst <- dis_class_by_inst[rev(order(dis_class_by_inst$Freq)),]
top_inst <- head(rank_inst,1)
colnames(top_inst) <- c("Top Instructor", "Number of Classes Taken")
print(top_inst, row.names = FALSE)
}
top_instructor()
top_instructor("Cycling")
top_instructor("Yoga")
top_instructor("Medidation")
top_instructor("Mediation")
top_instructor("Meditation")
data2
plot(data2$Length..minutes., data2$Total.Output)
plot(data1$Length..minutes., data1$Total.Output)
plot(data1$Length..minutes., data1$Avg..Watts)
plot(data2$Length..minutes., data2$Avg..Watts)
document()
devtools::document()
devtools::document()
?filter
?filter_
devtools::document()
devtools::document()
?devtools
?roxygen2
vignette("roxygen2", package = "roxygen2")
?devtools
cycling_summary <- function(data = workout_data_interface, type = "All", min_time = 11, min_output = 50) {
# Selects only cycling rides which conform to min_time and min_output
data <- data%>%
filter(Fitness.Discipline == "Cycling")%>%
filter(Length..minutes. >= min_time)%>%
filter(Total.Output >= min_output)
# Selects only rides corresponding to type, using a regular expression to find relevant rides
if (type !="All") {
if (type == "Class") {
data <- data%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))
}
else {
data <- filter(data, grepl(paste0("*",type,"*"), data$Title))
}
}
else data
}
top_instructor <- function(discipline = "All") {
if (discipline == "All") {
filt_by_disc <- workout_data_interface%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))
}
else {
filt_by_disc <- workout_data_interface%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))%>%
filter(Fitness.Discipline == discipline)
}
dis_class_by_inst <- filt_by_disc$Instructor.Name%>%
table()%>%
data.frame()
rank_inst <- dis_class_by_inst[rev(order(dis_class_by_inst$Freq)),]
top_inst <- head(rank_inst,1)
colnames(top_inst) <- c("Top Instructor", "Number of Classes Taken")
print(top_inst, row.names = FALSE)
}
#'
setup_peloton_data <- function(display_name = leaderboard_name) {
workout_data_interface <<- read.csv(paste0(display_name,"_workouts.csv"))
}
getwd()
setup_peloton_data("pizza2watts")
top_instructor()
library(dplyr)
top_instructor()
cycling_summary()
cycling_summary("Just")
cycling_summary()
cycling_summary(type = "Just")
cycling_summary <- function(data = workout_data_interface, type = "All", min_time = 11, min_output = 50) {
# Selects only cycling rides which conform to min_time and min_output
data <- data%>%
filter(Fitness.Discipline == "Cycling")%>%
filter(Length..minutes. >= min_time)%>%
filter(Total.Output >= min_output)
# Selects only rides corresponding to type, using a regular expression to find relevant rides
if (type !="All") {
if (type == "Class") {
data <- data%>%
filter(!grepl("*Just Ride", Title) & !grepl("*Scenic*", Title))
}
else {
data <- filter(data, grepl(paste0("*",type,"*"), data$Title))
}
}
else data
data
}
cycling_summary(min_time = 81)
cycling_summary(min_output = 81)
library(usethis)
?usethis
?use_pipe
use_pipe()
use_pipe()
?@importfrom
vignette("roxygen2")
library(devtools)
document()
?use_data
setup_peloton_data <- function(display_name = leaderboard_name) {
workout_data_interface <<- read.csv(paste0(display_name,"_workouts.csv"))
}
i_like_data <- setup_peloton_data("pizza2watts")
i_like_data
use_data(i_like_data, internal = TRUE)
document()
check()
check()
check()
?check
check()
use_data(i_like_data)
check()
use_data(i_like_data, interanl = TRUE)
use_data(i_like_data, interanl = FALSE)
?unlockBinding
check()
check()
check()
workout_data_interface <- i_like_data
use_data(workout_data_interface)
check()
document()
check()
check()
check()
check()
check()
check()
check()
check*
check()
check()
check()
check()
?read.csv
read.csv
force(workout_data_interface)
force(workout_data_interface)
View(i_like_data)
force(workout_data_interface)
workout_data_interface <- i_like_data
check()
check()
head(workout_data_interface)
force(workout_data_interface)
?use_data
use_data(name = "workout_data_interface", i_like_data, overwrite = TRUE, internal = FALSE)
use_data(i_like_data, name = "workout_data_interface", overwrite = TRUE, internal = FALSE)
use_data(i_like_data, name = "workout_data_interface_template", overwrite = TRUE, internal = FALSE)
workout_data_interface$Title
check()
class(workout_data_interface)
force(workout_data_interface)
rm(workout_data_interface)
class(workout_data_interface)
check()
w_data <- workout_data_interface
class(w_data)
filt_by_disc <- filter(w_data, !grepl("*Just Ride", w_data$Title) & !grepl("*Scenic*", w_data$Title))
class(filt_by_disc)
dis_class_by_inst <- filt_by_disc$Instructor.Name%>%
table()%>%
data.frame()
class(dis_class_by_inst)
check()
document()
check()
filt_by_disc
table(filt_by_disc)
table(filt_by_disc[Instructor.Name])
colnames(filt_by_disc)
table(filt_by_disc$Instructor.Name)
class(filt_by_disc)
is.atomic(filt_by_disc)
is.recursive(filt_by_disc)
filt_by_disc["Instructor.Name"]
table(filt_by_disc["Instructor.Name"])
data.frame(table(filt_by_disc["Instructor.Name"]))
check()
dis_class_by_inst <- table(filt_by_disc["Instructor.Name"])
dis_class_by_inst <- data.frame(dis_class_by_inst)
rank_inst <- dis_class_by_inst[rev(order(dis_class_by_inst$Freq)),]
rank_inst
top_inst <- head(rank_inst,1)
dim(top_inst)
top_inst
colnames(top_inst) <- c("Top Instructor", "Number of Classes Taken")
top_inst
check()
?colnames
colnames(top_inst)
check()
?print
check()
?head
setup_peloton_data <- function(display_name) {
workout_data_interface <- read.csv(paste0(display_name,"_workouts.csv"))
data.frame(workout_data_interface)
}
getwd()
setup_peloton_data("pizza2watts")
workout_data_interface <- setup_peloton_data("pizza2watts")
document()
document()
check()
colnames(workout_data_interface)
document()
check()
colnames(workout_data_interface)
head(workout_data_interface,1)
document()
check()
colnames(workout_data_interface)
document()
check()
colnames(workout_data_interface)
document()
check()
library(testthat)
package?testtha
package?testthat
top_instructor <- function(w_data = workout_data_interface, discipline = "All") {
if (discipline == "All") {
filt_by_disc <- dplyr::filter(w_data, !grepl("*Just Ride", w_data$Title) & !grepl("*Scenic*", w_data$Title))
}
else {
filt_by_disc <- dplyr::filter(w_data, !grepl("*Just Ride", w_data$Title) & !grepl("*Scenic*", w_data$Title) & w_data$Fitness.Discipline == discipline)
}
dis_class_by_inst <- table(filt_by_disc["Instructor.Name"])
dis_class_by_inst <- data.frame(dis_class_by_inst)
rank_inst <- dis_class_by_inst[rev(order(dis_class_by_inst$Freq)),]
#new_column_names <- c("Top Instructor", "Number of Classes Taken")
#colnames(rank_inst) <- new_column_names
top_inst <- utils::head(rank_inst,1)
print(top_inst, row.names = FALSE)
}
top_instructor()
class(top_instructor())
expect_that(top_instructor(), is.data.frame())
x <- top_instructor()
expect_that(x, is.data.frame())
expect_that(x, is.data.frame())
expect_that(top_instructor(), is_a(data.frame())
)
x <- top_instructor()
expect_that(x, is_a(data.frame())
)
expect_that(top_instructor(), prints_text())
expect_invisible(setup_peloton_data("pizza2watts"))
expect_visible(setup_peloton_data("pizza2watts"))
cycling_summary()
check()
document()
check()
check()
check()
check()
force(workout_data_interface)
check()
check()
check()
document()
document()
check()
load("~/R Projects/gofarR/data/workout_data_interface.rda")
rm(workout_data_interface)
load("~/R Projects/gofarR/data/workout_data_interface.rda")
document()
check()
load("~/R Projects/gofarR/data/workout_data_interface.rda")
load("/data/workout_data_interface.rda")
getwd()
load("data/workout_data_interface.rda")
rm(workout_data_interface)
load("data/workout_data_interface.rda")
check()
check()
document()
document()
check()
check()
check()
?read.csv
check()
document()
document()
check()
devtools::use_vignette("Initial Vignette")
install.packages("rmarkdown")
use_vignette("gofarR")
document()
check()
check()
install.packages("qpdf")
check()
qpdf
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
check()
check()
check()
check()
check()
check()
print("Hello world")
head(workout_data_interface,1
)
